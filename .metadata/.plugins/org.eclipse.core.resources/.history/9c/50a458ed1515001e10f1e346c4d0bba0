package rs.ac.bg.etf.pp1;

import java.util.ArrayList;

import rs.ac.bg.etf.pp1.CounterVisitor.FormParamCounter;
import rs.ac.bg.etf.pp1.CounterVisitor.VarCounter;
import rs.ac.bg.etf.pp1.ast.AddOpMinus;
import rs.ac.bg.etf.pp1.ast.AddOpPlus;
import rs.ac.bg.etf.pp1.ast.ConstDecl;
import rs.ac.bg.etf.pp1.ast.ConstValBoolean;
import rs.ac.bg.etf.pp1.ast.ConstValChar;
import rs.ac.bg.etf.pp1.ast.ConstValNumber;
import rs.ac.bg.etf.pp1.ast.DashOptLambda;
import rs.ac.bg.etf.pp1.ast.DashOptSingle;
import rs.ac.bg.etf.pp1.ast.Designator;
import rs.ac.bg.etf.pp1.ast.DesignatorListEpsilon;
import rs.ac.bg.etf.pp1.ast.DesignatorOptEpsilon;
import rs.ac.bg.etf.pp1.ast.DesignatorOptSingle;
import rs.ac.bg.etf.pp1.ast.DesignatorStatementEpsilon;
import rs.ac.bg.etf.pp1.ast.DesignatorStatementListRec;
import rs.ac.bg.etf.pp1.ast.DesignatorStatementOpt2;
import rs.ac.bg.etf.pp1.ast.DesignatorStatementOptAssign;
import rs.ac.bg.etf.pp1.ast.DesignatorStatementOptDecrement;
import rs.ac.bg.etf.pp1.ast.DesignatorStatementOptIncrement;
import rs.ac.bg.etf.pp1.ast.Expr;
import rs.ac.bg.etf.pp1.ast.ExprListSingle;
import rs.ac.bg.etf.pp1.ast.FactorMatrixSingle;
import rs.ac.bg.etf.pp1.ast.FactorNew;
import rs.ac.bg.etf.pp1.ast.FactorNewType;
import rs.ac.bg.etf.pp1.ast.FactorParsExpr;
import rs.ac.bg.etf.pp1.ast.LiteralsChar;
import rs.ac.bg.etf.pp1.ast.LiteralsNum;
import rs.ac.bg.etf.pp1.ast.MethodDecl;
import rs.ac.bg.etf.pp1.ast.MulOpDiv;
import rs.ac.bg.etf.pp1.ast.MulOpMod;
import rs.ac.bg.etf.pp1.ast.MulOpMul;
import rs.ac.bg.etf.pp1.ast.RetTypeName;
import rs.ac.bg.etf.pp1.ast.StatementPrint;
import rs.ac.bg.etf.pp1.ast.StatementRead;
import rs.ac.bg.etf.pp1.ast.SyntaxNode;
import rs.ac.bg.etf.pp1.ast.Term;
import rs.ac.bg.etf.pp1.ast.TermListRec;
import rs.ac.bg.etf.pp1.ast.VisitorAdaptor;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Struct;

public class CodeGenerator extends VisitorAdaptor {

	private int mainPc;
	private ArrayList<Obj> dodela = new ArrayList<Obj>();
	private Obj designatedArray = null;
	private boolean MatrixHelper = false;

	public int getMainPc() {
		return mainPc;
	}

	public void visit(RetTypeName retTypeName) {

		if ("main".equalsIgnoreCase(retTypeName.getMethodName())) {
			mainPc = Code.pc;// mozda treba da se incrementira
		}

		retTypeName.obj.setAdr(Code.pc);
		// Collect arguments and local variables
		SyntaxNode methodNode = retTypeName.getParent();

		VarCounter varCnt = new VarCounter();
		methodNode.traverseTopDown(varCnt);

		FormParamCounter fpCnt = new FormParamCounter();
		methodNode.traverseTopDown(fpCnt);

		// Generate the entry
		Code.put(Code.enter);
		Code.put(fpCnt.getCount());
		Code.put(fpCnt.getCount() + varCnt.getCount());
	}

	public void visit(MethodDecl methodDecl) {
		/*
		 * if(!returnFound && currentMethod.getType() != Tab.noType){
		 * report_error("Semanticka greska na liniji " + methodDecl.getLine() +
		 * ": funkcija " + currentMethod.getName() + " nema return iskaz!", null); }
		 * Tab.chainLocalSymbols(currentMethod); Tab.closeScope();
		 * 
		 * returnFound = false; currentMethod = null;
		 */
		Code.put(Code.exit);
		Code.put(Code.return_);
	}

	public void visit(StatementPrint statementPrint) {
		if (statementPrint.getExpr().struct == Tab.intType) {
			Code.loadConst(10);
			Code.put(Code.print);
		} else if (statementPrint.getExpr().struct == Tab.charType) {
			Code.loadConst(10);
			Code.put(Code.bprint);
		} else if (statementPrint.getExpr().struct != null) {

			if (statementPrint.getExpr().struct.getElemType().getKind() == Struct.Int) {
				Code.loadConst(10);
				Code.put(Code.print);
			} else if (statementPrint.getExpr().struct.getElemType().getKind() == Struct.Char) {
				Code.loadConst(10);
				Code.put(Code.bprint);
			}

		} else {
			Code.loadConst(10);
			Code.put(Code.print);
		}
	}

	public void visit(StatementRead statementRead) {

		if (statementRead.getDesignator().obj.getType().getKind() == Struct.Array) {

			if (statementRead.getDesignator().obj.getType().getElemType().getElemType() != null) {
				if (statementRead.getDesignator().obj.getType().getElemType().getElemType().getKind() == Struct.Array) {
					//matrica
					Obj temp1 = Tab.find("temp1");
					Obj temp2 = Tab.find("temp2");
					Code.store(temp1);// 1
					Code.store(temp2);// 2
					
					Code.load(statementRead.getDesignator().obj);
					Code.load(temp2);// 2
					
					Code.put(Code.aload);
					
					Code.load(temp1);// 1
						
					Code.put(Code.read);
					
					Code.put(Code.astore);
					return;
				}
			} else {//niz

				Code.put(Code.read);
				Code.put(Code.astore);	
					
				/*Code.load(statementRead.getDesignator().obj);
				Code.put(Code.arraylength);
				Code.put(Code.pop);*/
				//Code.put(Code.trap);
				//Code.put(1);
				return;
			}
		}

		Code.put(Code.read);
		Code.store(statementRead.getDesignator().obj);
	}

	public Obj poppedValue = null;

	public void visit(LiteralsNum literalsNum) {

		Obj con = Tab.insert(Obj.Con, "$", literalsNum.struct);
		con.setLevel(0);
		con.setAdr(literalsNum.getNumber());

		Code.load(con);
	}

	public void visit(LiteralsChar literalsChar) {

		Obj con = Tab.insert(Obj.Con, "$", literalsChar.struct);
		con.setLevel(0);
		con.setAdr(literalsChar.getC1().charAt(1));

		Code.load(con);

	}

	public void visit(DesignatorStatementOptAssign designatorStatementOptAssign) {
		// this.dodela.clear();//P
		Obj obj = designatorStatementOptAssign.getDesignator().obj;
		Struct str = designatorStatementOptAssign.getDesignator().getDesignatorList().struct;

		if (MatrixHelper == true) { // 4,5 na steku
			MatrixHelper = false;
			int arr_type = obj.getType().getElemType().getElemType().getKind();

			Obj temp1 = Tab.find("temp1");
			Obj temp2 = Tab.find("temp2");
			Code.store(temp1);// 5
			Code.store(temp2);// 4

			Code.load(temp2);// 4

			Code.put(Code.newarray);
			Code.put(1);
			Code.store(obj);// ->new arr

			// -------------------------------
			// do
			int top = Code.pc;
			Code.load(temp2);// 4
			Code.put(Code.const_1);// 4,1
			Code.put(Code.sub);// 3
			Code.store(temp2);// 3

			Code.load(obj);// ->that new array
			Code.load(temp2);// 3

			Code.load(temp1);// 5
			Code.put(Code.newarray);
			Code.put(arr_type);

			Code.put(Code.astore);// store that new array[3]=new arr

			Code.loadConst(1);
			Code.load(temp2);// 3
			// while
			Code.putFalseJump(Code.gt, top);// gt nije gt vec jle
			// -------------------------------

			return;
		}

		if (obj != null)
			if (obj.getType() != null)
				if (obj.getType().getKind() != Struct.Array
						|| (obj.getType().getKind() == Struct.Array && (designatorStatementOptAssign.getDesignator())
								.getDesignatorList() instanceof DesignatorListEpsilon)) {
					if (obj.getType().getElemType() != null && obj.getType().getElemType().getKind() == Struct.Array) {
						// Code.store(obj);

					} else
						Code.store(obj);

				} else {
					if (obj.getType().getElemType() == Tab.charType) {
						Code.put(Code.bastore);
					} else if (obj.getType().getElemType() == Tab.intType) {
						Code.put(Code.astore);
					} else if (obj.getType().getElemType().getElemType() != null) {
						// 1stBrace, 2ndBrace, valueToAssing
						Obj temp1 = Tab.find("temp1");
						Obj temp2 = Tab.find("temp2");

						Code.store(temp1);// value to store
						Code.store(temp2);// 2nd brace

						Code.load(designatorStatementOptAssign.getDesignator().obj);// matrixAdr

						Code.put(Code.dup2);// 1stBrace,matrixAdr
						Code.put(Code.pop);// 1stBrace,matrixAdr,1stBrace,matrixAdr

						// Code.load(temp2);
						Code.put(Code.aload);// 1stBrace,matrixAdr,1stBrace

						Code.load(temp2);// 1stBrace,matrix[1stBrace]

						if (designatorStatementOptAssign.getDesignator().obj.getType().getElemType().getElemType()
								.getKind() == Struct.Int) {

							// Code.put(Code.aload);
							Code.load(temp1);// 1stBrace,matrix[1stBrace],2nd brace
							Code.put(Code.astore);// 1stBrace,matrix[1stBrace],2nd brace,value to store
							/*
							 * Code.load(designator.obj); Code.put(Code.dup2); Code.put(Code.pop);
							 * Code.put(Code.aload); Code.put(Code.dup2); Code.put(Code.pop);
							 * Code.put(Code.aload); Obj temp1 = Tab.find("temp1"); Code.store(temp1);
							 * 
							 * Code.put(Code.pop); Code.put(Code.pop);
							 * 
							 * Code.load(temp1);
							 */
						}

						else {

							// Code.put(Code.baload);
							Code.load(temp1);
							Code.put(Code.bastore);
						}

						Code.put(Code.pop);// 1stBrace
						//

					}
				}

		/*
		 * if (obj != null) { if (obj.getType().getKind() != Struct.Array) {// if int or
		 * char if (obj.getType().getElemType() == Tab.charType) {
		 * Code.put(Code.bastore); } else if (obj.getType().getElemType() ==
		 * Tab.intType) { Code.put(Code.astore); } } else if (obj.getType().getKind() ==
		 * Struct.Array) { } }
		 */

	}

	public void visit(ConstDecl constDecl) {

		constDecl.obj = Tab.find(constDecl.getConstName());

		SyntaxNode type = constDecl.getConstVal();

		if (type instanceof ConstValNumber) {
			constDecl.obj.setAdr(((ConstValNumber) type).getN1());
		} else if (type instanceof ConstValChar) {
			constDecl.obj.setAdr(((ConstValChar) type).getC1().charAt(0));// 1
		} else if (type instanceof ConstValBoolean) {
			if (((ConstValBoolean) type).getB1().equals("true")) {
				constDecl.obj.setAdr(1);
			} else
				constDecl.obj.setAdr(0);
		}

	}

	public void visit(DesignatorStatementOptIncrement postfixPlus) {

		Obj var1 = Tab.find(postfixPlus.getDesignator().getDesignatorName());

		if (var1 == Tab.noObj) {
			var1 = postfixPlus.getDesignator().obj;
		}
		
		

		if (postfixPlus.getDesignator().obj.getType().getKind() == Struct.Array) {

			if(postfixPlus.getDesignator().obj.getType().getElemType().getElemType() != null) {
				
				Obj temp1 = Tab.find("temp1");
				Obj temp2 = Tab.find("temp2");
				Code.store(temp1);// 1
				Code.store(temp2);// 2
				
				Code.load(postfixPlus.getDesignator().obj);
				Code.load(temp2);// 2
				
				Code.put(Code.aload);
				
				// Code.put(Code.dup);
				
				Code.load(temp1);// 1
				Code.load(temp1);// 1
				Code.put(Code.aload);
				
				Code.put(Code.const_1);
				Code.put(Code.add);
				
				Code.put(Code.astore);
				
				return;
			}else {
				
				Code.put(Code.dup2);

				// if(postfixPlus.getDesignator().obj.getType().getElemType() == Tab.intType)
				Code.put(Code.aload);
				/*
				 * else Code.put(Code.baload);
				 */

				Code.put(Code.const_1);
				Code.put(Code.add);
				Code.put(Code.astore);

				return;
				
				
			}


		}
		Code.put(Code.const_1);
		Code.put(Code.add);
		Code.store(var1);
	}

	public void visit(DesignatorStatementOptDecrement postfixMinus) {

		Obj var2 = Tab.find(postfixMinus.getDesignator().getDesignatorName());

		if (var2 == Tab.noObj) {
			var2 = postfixMinus.getDesignator().obj;
		}

		if (postfixMinus.getDesignator().obj.getType().getKind() == Struct.Array) {

			Code.put(Code.dup2);

			// if(postfixPlus.getDesignator().obj.getType().getElemType() == Tab.intType)
			Code.put(Code.aload);
			/*
			 * else Code.put(Code.baload);
			 */

			Code.put(Code.const_1);
			Code.put(Code.sub);
			Code.put(Code.astore);

			return;

		}

		// getstatic
		Code.put(Code.const_1);
		Code.put(Code.sub);
		Code.store(var2);

	}

	public void visit(TermListRec termListRec) {

		SyntaxNode type = termListRec.getMulOp();

		if (type instanceof MulOpMul)
			Code.put(Code.mul);
		else if (type instanceof MulOpDiv)
			Code.put(Code.div);
		else if (type instanceof MulOpMod)
			Code.put(Code.rem);

	}

	public void visit(ExprListSingle exprListSingle) {

		SyntaxNode type = exprListSingle.getAddOp();

		if (type instanceof AddOpPlus)
			Code.put(Code.add);
		else if (type instanceof AddOpMinus)
			Code.put(Code.sub);

	}

	public void visit(Term term) {
		if (term.getParent() != null)
			if (term.getParent() instanceof Expr)
				if (((Expr) term.getParent()).getDashOpt() instanceof DashOptSingle)
					Code.put(Code.neg);
	}

	/*
	 * public void visit(Expr term) { if (term.getParent() != null) if
	 * (term.getParent() instanceof Expr) if (((Expr) term.getParent()).getDashOpt()
	 * instanceof DashOptSingle) Code.put(Code.neg); }
	 */

	public void visit(FactorNew factorNew) {

		if (MatrixHelper == true)
			return;

		int newType = 0;

		if (factorNew.getFactorNewType().struct == Tab.charType)
			newType = 0;
		else
			newType = 1;

		Code.put(Code.newarray);
		Code.put(newType);

	}

	public void visit(FactorMatrixSingle factorMatrixSingle) {
		MatrixHelper = true;
	}

	public void visit(Designator designator) {
		SyntaxNode parent = designator.getParent();
		// Code.load(designator.obj);
		/*
		 * if(DesignatorStatementOptAssign.class != parent.getClass() &&
		 * FactorDesignator.class != parent.getClass() &&
		 * DesignatorStatementOptActPars.class != parent.getClass()){
		 * Code.load(designator.obj); }
		 */

		if (designator.obj != null) {
			if (designator.getParent() instanceof StatementRead) {
				return;
			}
		}

		if (designator.obj != null)
			if (DesignatorStatementOptAssign.class != parent.getClass()) {
				/*
				 * if(designator.obj.getType().getKind() == Struct.Array) {
				 * if(designator.obj.getType().getElemType() == Tab.charType)
				 * Code.put(Code.bastore); else Code.put(Code.astore); } else
				 */
				if (isPrint == true) {// ako je print

					if (designator.obj.getType().getKind() == Struct.Array) {

						if (designator.obj.getType().getElemType().getElemType() != null) {

							Obj temp1 = Tab.find("temp1");
							Obj temp2 = Tab.find("temp2");

							Code.store(temp1);// 2
							Code.store(temp2);// 1

							Code.load(designator.obj);

							Code.load(temp2);
							Code.put(Code.aload);

							Code.load(temp1);

							if (designator.obj.getType().getElemType().getElemType().getKind() == Struct.Int) {

								Code.put(Code.aload);
								/*
								 * Code.load(designator.obj); Code.put(Code.dup2); Code.put(Code.pop);
								 * Code.put(Code.aload); Code.put(Code.dup2); Code.put(Code.pop);
								 * Code.put(Code.aload); Obj temp1 = Tab.find("temp1"); Code.store(temp1);
								 * 
								 * Code.put(Code.pop); Code.put(Code.pop);
								 * 
								 * Code.load(temp1);
								 */
							}

							else {

								Code.put(Code.baload);
							}
						} else if (designator.obj.getType().getElemType().getKind() == Struct.Int)
							Code.put(Code.aload);
						else
							Code.put(Code.baload);
						// statementPrint.getExpr().struct == Tab.intType

						isPrint = false;
						return;
					}

					isPrint = false;
					Code.load(designator.obj);
					return;
				} else if (!(designator.getParent() instanceof DesignatorStatementOptIncrement)
						&& !(designator.getParent() instanceof DesignatorStatementOptDecrement))// ako nije inc or dec
					if (designator.obj.getType().getKind() != Struct.Array) {// za matricu|niz

						if (designator.obj.getType().getElemType() != null
								&& designator.obj.getType().getElemType().getKind() != Struct.Array) {// za matricu
							// Code.store(designator.obj);
						} else {// za niz
							if (designator.getParent() instanceof DesignatorOptSingle)
								dodela.add(designator.obj);
							else
								Code.load(designator.obj);
						}

						// else Code.put(Code.aload);
					} else if (!(designator.getParent() instanceof DesignatorStatementOpt2)) {// ako je onaj ludacki
																								// jan/feb

						if ((designator.getParent()) != null)
							// || (designator.getParent() instanceof DesignatorStatementListRec)
							if ((designator.getParent() instanceof DesignatorOptSingle)) {
								this.dodela.add(designator.obj);
								return;
							}

						if (designator.obj.getType().getElemType() != null) {

							if (designator.obj.getType().getElemType().getKind() == Struct.Int) {
								Code.put(Code.aload);
							} else if (designator.obj.getType().getElemType().getKind() == Struct.Char) {
								Code.put(Code.baload);
							} else if (designator.obj.getType().getElemType().getElemType() != null) {

								Obj temp1 = Tab.find("temp1");
								Obj temp2 = Tab.find("temp2");

								Code.store(temp1);// 2
								Code.store(temp2);// 1

								Code.load(designator.obj);

								Code.load(temp2);
								Code.put(Code.aload);

								Code.load(temp1);

								if (designator.obj.getType().getElemType().getElemType().getKind() == Struct.Int) {

									Code.put(Code.aload);
									/*
									 * Code.load(designator.obj); Code.put(Code.dup2); Code.put(Code.pop);
									 * Code.put(Code.aload); Code.put(Code.dup2); Code.put(Code.pop);
									 * Code.put(Code.aload); Obj temp1 = Tab.find("temp1"); Code.store(temp1);
									 * 
									 * Code.put(Code.pop); Code.put(Code.pop);
									 * 
									 * Code.load(temp1);
									 */
								}

								else {

									Code.put(Code.baload);
								}
							}

						}
						//
					} else // sta je ostalo od opcija? a udje ovde
						designatedArray = designator.obj;

				else {
					if ((designator.getParent() instanceof DesignatorStatementOptIncrement)
							|| (designator.getParent() instanceof DesignatorStatementOptDecrement))
						if (designator.obj.getType().getKind() != Struct.Array)
							Code.load(designator.obj);// here!!!
				}
			}
	}

	public boolean isPrint = false;

	public void visit(DesignatorListEpsilon designatorListEpsilon) {

		if (designatorListEpsilon.getParent() != null) {
			if (designatorListEpsilon.getParent().getParent() != null) {
				if (designatorListEpsilon.getParent().getParent() instanceof Designator) {
					Obj obj = ((Designator) designatorListEpsilon.getParent().getParent()).obj;
					Code.load(obj);
				}
			}
		}
	}

	public void visit(DashOptLambda dashOptLambda) {// expr
		if (dashOptLambda.getParent() != null)
			if (dashOptLambda.getParent().getParent() != null)
				if (dashOptLambda.getParent().getParent() instanceof StatementPrint)
					isPrint = true;

	}

	public void visit(DesignatorOptEpsilon designatorOptEpsilon) {
		Obj obj = null;
		dodela.add(obj);
	}

	public void visit(DesignatorStatementOpt2 designatorStatementOpt2) {

		/*
		 * int cnt = dodela.size(); for(int i = cnt-1; i >= 0; i--) { if(dodela.get(i)
		 * != null) { Code.load(designatedArray); Code.loadConst(i);
		 * Code.put(Code.aload); if(dodela.get(i).getType().getKind() == Struct.Array)
		 * Code.put(Code.astore); else Code.store(dodela.get(i)); } } designatedArray =
		 * null; dodela.clear();
		 */

	}

}
